services:
  postgres-user:
    image: postgres:latest
    container_name: postgres-user
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_USER_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-asset:
    image: postgres:latest
    container_name: postgres-asset
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_ASSET_DB}
      POSTGRES_USER: ${POSTGRES_ASSET_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ASSET_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres-asset-data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672" # RabbitMQ message broker
      - "15672:15672" # RabbitMQ management UI
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 30s

  user-service:
    build: ./services/user-service
    container_name: user-service
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-user:
        condition: service_started
      redis:
        condition: service_started

    environment:
      NODE_ENV: development
      POSTGRES_DB: ${POSTGRES_USER_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      PORT: ${USER_SERVICE_PORT}
      JWT_SECRET: ${JWT_SECRET}
    env_file:
      - .env
    ports:
      - "4000:4000"
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    networks:
      - backend

  asset-service:
    build: ./services/asset-service
    container_name: asset-service
    restart: always
    depends_on:
      - postgres-asset
      - redis
      - rabbitmq
    environment:
      NODE_ENV: development
      POSTGRES_DB: ${POSTGRES_ASSET_DB}
      POSTGRES_USER: ${POSTGRES_ASSET_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ASSET_PASSWORD}
      PORT: ${ASSET_SERVICE_PORT}
      JWT_SECRET: ${JWT_SECRET}
    env_file:
      - .env
    ports:
      - "4002:4002"
    volumes:
      - ./services/asset-service:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    networks:
      - backend

  api-gateway:
    build: ./services/api-gateway
    container_name: api-gateway
    restart: always
    depends_on:
      - redis
    environment:
      NODE_ENV: development
      PORT: ${API_GATEWAY_PORT}
      JWT_SECRET: ${JWT_SECRET}
    env_file:
      - .env
    ports:
      - "3001:3001"
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    networks:
      - backend

volumes:
  postgres-user-data:
  postgres-asset-data:

networks:
  backend:
    driver: bridge
